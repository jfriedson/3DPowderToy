#version 460

precision highp float;
precision highp int;

const int gDim = 8;
const int gSpacing = gDim * 2;
layout(local_size_x = gDim, local_size_y = gDim, local_size_z = gDim) in;


uniform uint currentFlag;
uniform ivec3 part;

uniform int time;

uniform uint blockType;
uniform bool placeBlock;

//uniform uint dimension;
//uniform uint maxVelocity;


layout(binding = 0, std430) restrict readonly buffer BlockLocation {
    uvec3 blockLocation;
};

const uint FLAG = 0x80;
const uint TYPE = 0x7F;
const uint VEL_X = 0xFF000000;
const uint VEL_Y = 0x00FF0000;
const uint VEL_Z = 0x0000FF00;
layout(r32ui, binding = 1) coherent uniform uimage3D gridTexture;


// adapted from https://www.shadertoy.com/view/4djSRW (volume warning!)
float random4to1(vec4 p4) {
	p4 = fract(p4 * vec4(.1031f, .1030f, .0973f, .1099f));
    p4 += dot(p4, p4.wzxy + 33.33f);
    return fract((p4.x + p4.y + p4.z) * p4.w);
}

vec2 random4to2(vec4 p4) {
	p4  = fract(p4 * vec4(.1031f, .1030f, .0973f, .1099f));
    p4 += dot(p4, p4.wzxy + 33.33f);
    return fract((p4.xz + p4.yw + p4.zx) * p4.wy);
}

vec3 random4to3(vec4 p4) {
	p4  = fract(p4 * vec4(.1031f, .1030f, .0973f, .1099f));
    p4 += dot(p4, p4.wzxy + 33.33f);
    return fract((p4.xyz + p4.yzw + p4.zwx) * p4.wxy);
}

vec4 random4to4(vec4 p4) {
	p4 = fract(p4  * vec4(.1031f, .1030f, .0973f, .1099f));
    p4 += dot(p4, p4.wzxy + 33.33f);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}


#define AIR 0
#define ROCK 1
#define SAND 2
uint Sand(uint voxel, ivec3 pos);

#define WATER 3
uint Water(uint voxel, ivec3 pos);


void main() {
	ivec3 pos = ivec3(gl_WorkGroupID * gSpacing) + (part * gDim) + ivec3(gl_LocalInvocationID);

	uint voxel = imageLoad(gridTexture, pos).r;

	// if it's air, return quickly to optimize empty space
	if(voxel == AIR) {
		if(placeBlock  &&  blockType != AIR  &&  distance(pos, blockLocation) < 5.f) {
			imageStore(gridTexture, pos, uvec4(currentFlag | blockType));
			memoryBarrier();
		}

		return;
	}
	// otherwise, if deleting blocks
	else if(placeBlock  &&  blockType == AIR  &&  distance(pos, blockLocation) < 5.f) {
		imageStore(gridTexture, pos, uvec4(AIR));
		memoryBarrier();
		return;
	}

	// return if the current particle has already been updated
	if((voxel & FLAG) == currentFlag)
		return;

	voxel ^= FLAG;  // toggle flag bit
	
	barrier();  // get all voxel values in this group before continuing

	uint newVoxel = voxel;
	if((voxel & TYPE) == SAND) newVoxel = Sand(voxel, pos);
	else if((voxel & TYPE) == WATER) newVoxel = Water(voxel, pos);

	if(newVoxel == voxel) {
		imageStore(gridTexture, pos, uvec4(newVoxel));
		return;
	}
	
	if(placeBlock  &&  newVoxel == AIR  &&  blockType != AIR  &&  distance(pos, blockLocation) < 5.f) {
		imageStore(gridTexture, pos, uvec4(currentFlag | blockType));
	}
}


uint swapIfAvailable(ivec3 pos, ivec3 nPos, uint voxel) {
	if(imageAtomicCompSwap(gridTexture, nPos, AIR, voxel) == AIR) {
		imageStore(gridTexture, pos, uvec4(voxel = AIR));
		memoryBarrier();
	}

	return voxel;
}


uint Sand(uint voxel, ivec3 pos) {
	if(pos.y > 0) {
		// straight down
		voxel = swapIfAvailable(pos, pos + ivec3(0, -1, 0), voxel);
		if(voxel != SAND) return voxel;

		// lateral-down
		ivec4 rand = ivec4(floor(random4to4(vec4(pos, time)) * vec4(1.999f, 1.999f, 2.999f, 2.999f)));
		rand.xy = (2 * rand.xy - 1);

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				ivec2 nPos = (ivec2(i, j) * rand.xy + rand.zw) % 3 - 1;
				if(nPos == ivec2(0)) continue;
				voxel = swapIfAvailable(pos, pos + ivec3(nPos.x, -1, nPos.y), voxel);
				if(voxel != SAND) return voxel;
			}
		}
	}

	return voxel;
}


uint Water(uint voxel, ivec3 pos) {
	if(pos.y > 0) {
		// straight down
		voxel = swapIfAvailable(pos, pos + ivec3(0, -1, 0), voxel);
		if(voxel != WATER) return voxel;
	}

	ivec4 rand = ivec4(floor(random4to4(vec4(pos, time)) * vec4(1.999f, 1.999f, 2.999f, 2.999f)));
	rand.xy = (2 * rand.xy - 1);

	// lateral-down
	if(pos.y > 0) {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				ivec2 nPos = (ivec2(i, j) * rand.xy + rand.zw) % 3 - 1;
				if(nPos == ivec2(0)) continue;
				voxel = swapIfAvailable(pos, pos + ivec3(nPos.x, -1, nPos.y), voxel);
				if(voxel != WATER) return voxel;
			}
		}
	}

	// lateral
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			ivec2 nPos = (ivec2(i, j) * rand.xy + rand.zw) % 3 - 1;
			if(nPos == ivec2(0)) continue;
			voxel = swapIfAvailable(pos, pos + ivec3(nPos.x, 0, nPos.y), voxel);
			if(voxel != WATER) return voxel;
		}
	}

	return voxel;
}
