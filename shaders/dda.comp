#version 460

precision highp float;
precision highp int;

#define dim 16
layout(local_size_x = dim, local_size_y = dim) in;


uniform ivec2 resolution;

uniform vec3 cameraPos;
uniform mat3 cameraMat;

uniform uint dimension;

uniform float blockDist;
uniform float blockSize;
uniform bool placeBlock;
uniform bool updateDist;

uniform bool drawLines;


layout(binding = 0, std430) restrict buffer BlockLocation {
    uvec3 blockLocation;
};

layout(rgba8, binding = 0) restrict writeonly uniform image2D rtTexture;
layout(r32ui, binding = 1) restrict readonly uniform uimage3D gridTexture;


// constants
const float maxDrawDist = 300;

const float tLineThresh = .01;
const float lineFactor = .004;

const float tDistThresh = .01;


// block types
const uint TYPE = 0x7F;
#define AIR 0
#define ROCK 1
#define SAND 2
#define WATER 3


float minComponent(vec3 v) {
    return min(min(v.x, v.y), v.z);
}

float maxComponent(vec3 v) {
    return max(max(v.x, v.y), v.z);
}

vec3 castRay(vec3 origin, vec3 dir, bool blockDistRay) {
    const vec3 inverseDir = 1.f / dir;
	const vec3 bias = inverseDir * origin;

    const vec3 boundsMin = -bias;
    const vec3 boundsMax = dimension * inverseDir - bias;

    const float tMin = max(0, maxComponent(min(boundsMin, boundsMax)));
	const float tMax = 		  minComponent(max(boundsMin, boundsMax));

	// Ray misses bounding cube
    if (tMin > tMax) {
		if(blockDistRay) {
			blockLocation = uvec3(dimension + uint(blockDist));
			return vec3(1);
		}

        return vec3(0);
	}

    origin += dir * tMin;
    ivec3 pos = ivec3(origin);

    vec3 tDelta = abs(inverseDir);
    vec3 dirSign = sign(dir);
    ivec3 step = ivec3(dirSign);
    vec3 sideDist = (dirSign * (floor(origin) - origin + 0.5) + 0.5) * tDelta;

    float t = 0;
	const float tBound = tMax - tMin;

	if(blockDistRay) {
		if(updateDist) {
			ivec3 lastPos = ivec3(dimension + uint(blockDist));

			while (t < tBound  &&  t < (tBound - tDistThresh)  &&  (tMin + t) < blockDist) {
				if(!placeBlock  &&  imageLoad(gridTexture, pos).r != AIR)
					break;

				// dda traversal
		        float tPrev = t;
				t = minComponent(sideDist);
				
				bvec3 mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
		        sideDist += mix(vec3(0), tDelta, mask);
				lastPos = pos;
		        pos += mix(ivec3(0), step, mask);
		    }

			blockLocation = uvec3(lastPos);
		}

		return vec3(1);
	}
	else {
		const float bgColor = .15;
		float lineColor = 0;
		float placeColor = 0;
		bvec3 mask = bvec3(false);
	    while (t < tBound  &&  (tMin + t < maxDrawDist)) {
			float distFromBlockLoc = distance(pos, blockLocation);

			if(distFromBlockLoc < blockSize)
				placeColor = .5;

			uint voxel = imageLoad(gridTexture, pos).r & TYPE;
			if(voxel != AIR) {
				float shadowIntensity = float(mask.x) * .5 + float(mask.y) * .8 + float(mask.z) * .6;
				if(voxel == ROCK)		return vec3(min(placeColor + lineColor, .7f)) + vec3(.26, .25, .22) * vec3(shadowIntensity);
				else if(voxel == SAND)	return vec3(min(placeColor + lineColor, .7f)) + vec3(.98, .69, .01) * vec3(shadowIntensity);
				else if(voxel == WATER)	return vec3(min(placeColor + lineColor, .7f)) + vec3(.17, .25, .31) * vec3(shadowIntensity);
			}


			// dda traversal
			float tPrev = t;
	        t = minComponent(sideDist);

			// draw lines when change in t is very small
			if(drawLines  &&  (t > tLineThresh)  &&  abs(tPrev - t) < (t * lineFactor)) {
				if(t < (blockDist + blockSize)) {
					float thisLine = min(max(blockSize / blockDist, .05), .6);
					lineColor = min(lineColor + thisLine, .8f);
				}
			}
			
			mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
	        sideDist += mix(vec3(0), tDelta, mask);
	        pos += mix(ivec3(0), step, mask);
	    }

		return vec3(bgColor + lineColor + placeColor);
	}
}


void main() {
	// use first shader invocation for block location to remove tearing
	// and use center pixel invocation to fill in first invocation pixel
	ivec2 screenPos = ivec2(gl_GlobalInvocationID.xy);
	bool blockDistRay = false;
	if(screenPos == ivec2(0)) {
		screenPos = resolution/2;
		blockDistRay = true;
	}
	else if(screenPos == resolution/2)
		screenPos = ivec2(0);

	vec3 rayVec = normalize(vec3((screenPos - (0.5 * resolution)) / resolution.y, 1)) * cameraMat;
	vec3 color = castRay(cameraPos, rayVec, blockDistRay);

    imageStore(rtTexture, screenPos, vec4(color, 0));
}
